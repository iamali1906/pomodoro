generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String         @unique
  passwordHash  String
  tasks         Task[]
  settings      Setting?
  statistics    Statistic?
  notifications Notification[]
  token         String? // Optional field for token-based authentication
}

model Task {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  title         String
  workDuration  Int       @default(25)
  description   String?
  status        String    @default("pending") @db.VarChar(50)
  startTime     Int?
  endTime       Int?
  remainingTime Int?
  completed     Boolean   @default(false) @db.Boolean
  active        Boolean   @default(false) @db.Boolean

  @@index([userId])
}

model Setting {
  id                 Int  @id @default(autoincrement())
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int  @unique
  shortBreakDuration Int  @default(5)
  longBreakDuration  Int  @default(15)
  longBreakInterval  Int  @default(4)

  @@index([userId])
}

model Statistic {
  id                Int  @id @default(autoincrement())
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int  @unique
  totalWorkSessions Int  @default(0)
  totalWorkTime     Int  @default(0)
  totalBreakTime    Int  @default(0)

  @@index([userId])
}

model Notification {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  message String
  isRead  Boolean @default(false)

  @@index([userId])
}
